package numbers;

import java.util.Scanner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


/*
- Create a method to check for Jumping numbers.
- Create enum with the following - Names of operations, name of operations as string, impossible pairings.
- Create method to check for spy numbers using the modulo to get the number.
- Redo the

 */
//class AmazingNumber {
//    private String amazingNumberName;
//    private boolean isTrueValue;
//
//    protected AmazingNumber(String amazingNumberName, boolean isTrueValue) {
//        this.amazingNumberName = amazingNumberName;
//        this.isTrueValue = isTrueValue;
//    }
//
//    protected String getAmazingNumberName() {
//        return amazingNumberName;
//    }
//
//    protected boolean isTrueValue() {
//
//        return isTrueValue;
//    }
//
//}



public class Main {
    protected long playerInput = 0;     // OK
    protected int countOfNumbersToAnalyze = 0;  // OK
    protected String numberString = "";         // OK
    final protected char BUZZ_NUMBER = '7', DUCK_NUMBER = '0';  // ok to move to the method

//    final protected String      // check how to do this as an enum
//            DUCK = "DUCK",
//            BUZZ = "BUZZ",
//            SPY = "SPY",
//            EVEN = "EVEN",
//            ODD = "ODD",
//            PALINDROMIC = "PALINDROMIC",
//            GAPFUL = "GAPFUL",
//            SQUARE = "SQUARE",
//            SUNNY = "SUNNY",
//            JUMPING = "JUMPING";
//
//    final protected String[] optionsToChooseFrom = {DUCK, BUZZ, SPY, EVEN, ODD, PALINDROMIC, GAPFUL, SQUARE, SUNNY, JUMPING};

    protected boolean running = true;
    protected boolean findCase = false;
    protected String checkProperty;         // remove
    protected String secondCheckProperty;       // remove
    protected boolean firstPropertyIsWrong = false;     //remove
    protected boolean secondPropertyIsWrong = false;    // remove
    int counter = 0;

    protected String getInputString() throws IOException {

        Scanner scanner = new Scanner(System.in);

        String inputString;
        inputString = scanner.nextLine();

        while (inputString == null || inputString.isEmpty()) {
            System.out.print("The first parameter should be a natural number or zero. \n");
            inputString = scanner.nextLine();
        }


        return inputString;
    }       // OK no changes needed

    protected void checkStartingNumber(String firstNumber) throws IOException {

        try {

            playerInput = Long.parseLong(firstNumber);


            if (playerInput < 0) {
                System.out.print("The first parameter should be a natural number or zero. \n ");
                counter++;
                getPlayerInput();
            }

        } catch (NumberFormatException e) {
            System.out.print("The first parameter should be a natural number or zero. \n ");
            counter++;
            getPlayerInput();

        }


    }

    protected void checkNumberToAnalyze(String secondNumber) throws IOException {
        try {

            countOfNumbersToAnalyze = Integer.parseInt(secondNumber);

            if (countOfNumbersToAnalyze < 0) {
                System.out.print("The second parameter should be a natural number. \n");
                counter++;
                getPlayerInput();
            }

        } catch (NumberFormatException e) {

            System.out.print("The second parameter should be a natural number. \n");
            counter++;
            getPlayerInput();
        }


    } // OK to keep

    protected void checkPropertyToSearchFor(String propertyToCheckFor) throws IOException {

        String stringToCompare = propertyToCheckFor;

        for (int i = 0; i < optionsToChooseFrom.length; i++) {
            if (stringToCompare.equalsIgnoreCase(optionsToChooseFrom[i])) {
                counter++;
                findCase = true;
                checkProperty = stringToCompare;
                return;

            }
        }

        System.out.printf("The property [%S] is wrong. %n", stringToCompare.toUpperCase());
        System.out.print("Available properties:[");
        for (int j = 0; j < optionsToChooseFrom.length; j++) {
            if (j == 0) {
                System.out.print(optionsToChooseFrom[j]);
            } else {
                System.out.printf(", %S", optionsToChooseFrom[j]);
            }
        }
        System.out.print("]\n");

        getPlayerInput();
    } // This need to be consolidated


    protected void checkPropertyToSearchFor(String propertyToCheckFor, String secondCheckProperty) throws IOException {

        String stringToCompare = propertyToCheckFor;
        String existSecond = secondCheckProperty;

        for (int i = 0; i < optionsToChooseFrom.length; i++) {
            if (stringToCompare.equalsIgnoreCase(optionsToChooseFrom[i])) {
                counter++;
                findCase = true;
                checkProperty = stringToCompare;
                firstPropertyIsWrong = false;
                return;

            }
        }
        firstPropertyIsWrong = true;
    }
    // This need to be consolidated

    protected void checkSecondPropertyToSearchFor(String propertyToCheckFor2, String propertyToCheckFor)
            throws IOException {

        secondPropertyIsWrong = true;

        String stringToCompare = propertyToCheckFor2;

        if (propertyToCheckFor.equalsIgnoreCase(SUNNY) && propertyToCheckFor2.equalsIgnoreCase(SQUARE)
                || propertyToCheckFor.equalsIgnoreCase(SQUARE) && propertyToCheckFor2.equalsIgnoreCase(SUNNY)) {
            System.out.printf("The Request contains mutually exclusive properties: [%s, %s]%n",
                    propertyToCheckFor.toUpperCase(), propertyToCheckFor2.toUpperCase());
            getPlayerInput();
        } else if (propertyToCheckFor.equalsIgnoreCase(EVEN) && propertyToCheckFor2.equalsIgnoreCase(ODD)
                || propertyToCheckFor.equalsIgnoreCase(ODD) && propertyToCheckFor2.equalsIgnoreCase(EVEN)) {
            System.out.printf("The Request contains mutually exclusive properties: [%s, %s]%n",
                    propertyToCheckFor.toUpperCase(), propertyToCheckFor2.toUpperCase());
            getPlayerInput();
        } else if (propertyToCheckFor.equalsIgnoreCase(DUCK) && propertyToCheckFor2.equalsIgnoreCase(SPY)
                || propertyToCheckFor.equalsIgnoreCase(SPY) && propertyToCheckFor2.equalsIgnoreCase(DUCK)) {
            System.out.printf("The Request contains mutually exclusive properties: [%s, %s]%n",
                    propertyToCheckFor.toUpperCase(), propertyToCheckFor2.toUpperCase());
            getPlayerInput();
        }

        for (int i = 0; i < optionsToChooseFrom.length; i++) {
            if (stringToCompare.equalsIgnoreCase(optionsToChooseFrom[i])) {
                counter++;
                secondCheckProperty = stringToCompare;
                secondPropertyIsWrong = false;
            }

        }

        if (firstPropertyIsWrong && secondPropertyIsWrong) {
            System.out.printf("The properties [%S] and [%S] are wrong. %n", propertyToCheckFor.toUpperCase(), stringToCompare.toUpperCase());
        } else if (!firstPropertyIsWrong && secondPropertyIsWrong) {
            System.out.printf("The property [%S] is wrong. %n", stringToCompare.toUpperCase());
        } else if (firstPropertyIsWrong && !secondPropertyIsWrong) {
            System.out.printf("The property [%S] is wrong. %n", propertyToCheckFor.toUpperCase());
        } else {
            return;
        }

        System.out.print("Available properties:[");

        for (int j = 0; j < optionsToChooseFrom.length; j++) {
            if (j == 0) {
                System.out.print(optionsToChooseFrom[j]);
            } else {
                System.out.printf(", %S", optionsToChooseFrom[j]);
            }
        }
        System.out.print("]\n");

        getPlayerInput();
    }           // This need to be consolidated


    protected void getPlayerInput() throws IOException {

        if (counter == 0) {
            String introText = """
                    Welcome to Amazing Numbers!
                                        
                    Supported requests:
                     - enter a natural number to know its properties;
                     - enter two natural numbers to obtain the properties of the list:
                     * the first parameter represents a starting number;
                     * the second parameter shows how many consecutive numbers are to be printed;
                     - two natural numbers and a property to search for;
                     - two natural numbers and two properties to search for;
                     - separate the parameters with one space;
                     - enter 0 to exit.
                                    
                    Enter a request: 
                    """;

            System.out.println(introText);
            counter++;
        } else {
            System.out.println("Enter a request: ");
            counter++;                                              // keeps score of how many request you have made.
        }

        String[] components = getInputString().split(" ");
        if (4 == components.length) {      // for this we need to get creative and incorporate the full 10  check
            checkStartingNumber(components[0]);
            checkNumberToAnalyze(components[1]);
            checkPropertyToSearchFor(components[2], components[3]);  // remove the method and consolidate
            checkSecondPropertyToSearchFor(components[3], components[2]);    // also checks for mutually paradox cases


        } else if (3 == components.length) {
            checkStartingNumber(components[0]);
            checkNumberToAnalyze(components[1]);
            checkPropertyToSearchFor(components[2]); // Modify this method so it searches for  paradoxes and

        } else if (2 == components.length) {
            checkStartingNumber(components[0]);
            checkNumberToAnalyze(components[1]);

        } else if (components.length == 1) {
            checkStartingNumber(components[0]);

        } else {
            System.out.println("Invalid input");
        }

    }

    protected void updateRunning() {

        if (playerInput == 0) {
            running = false;
        }

    }

    protected String convertIntToString(long playerInput) {

        numberString = String.valueOf(playerInput);

        return numberString;

    }

// beginning of subclasses

    protected class Operations extends Main {
        // Simple fields

        protected long playerInput;
        protected String numberString;
        //        protected int countOfNumberToAnalyze;
        protected int runs;
        protected int foundCases = 0;
        protected int foundCase2 = 0;
        boolean findCase;
        boolean FindCase2;


        String checkProperty, secondCheckProperty;

        protected Operations(long playerInput, String numberString, boolean running, int countOfNumberToAnalyze,
                             boolean findCase, String checkProperty, String secondCheckProperty) {

            this.numberString = numberString;
            this.playerInput = playerInput;
            this.running = running;
            this.countOfNumbersToAnalyze = countOfNumberToAnalyze;
            this.findCase = findCase;
            this.checkProperty = checkProperty;
            this.secondCheckProperty = secondCheckProperty;

        }

        protected boolean endsWithSeven(long playerInput) {

            boolean endsWithBuzzNumber = false;

            String tempNumberAsString = String.valueOf(playerInput);

            int playerInputLength = tempNumberAsString.length();

            if (tempNumberAsString.charAt(playerInputLength - 1) == BUZZ_NUMBER) {
                endsWithBuzzNumber = true;
            } else {
                endsWithBuzzNumber = false;
            }

            return endsWithBuzzNumber;
        }

        protected boolean isDivisibleBySeven(long playerInput) {
            boolean isDivisible = false;

            if (playerInput % 7 == 0) {
                isDivisible = true;
            } else {
                isDivisible = false;
            }

            return isDivisible;

        }

        protected boolean multiAnalysis() {
            if (countOfNumbersToAnalyze > 0) {
                return true;
            } else {
                return false;
            }

        }

        protected boolean determineEvenOrOdd(long playerInput) {
            boolean isEven = false;
            if (playerInput % 2 == 0) {
                isEven = true;

            } else {
                isEven = false;
            }
            return isEven;
        }

        protected boolean determinePalindromic(long playerInput) {

            String tempNumberString = Long.toString(playerInput);

            int arrayLengthOfString = tempNumberString.length();

            int matchingNumbers = 0;

            char[] tempBackwardsString = new char[arrayLengthOfString];

            for (int i = 0; i < arrayLengthOfString; i++) {
                tempBackwardsString[i] = tempNumberString.charAt((arrayLengthOfString - 1) - i);
            }

            for (int i = 0; i < arrayLengthOfString; i++) {

                if (tempBackwardsString[i] == tempNumberString.charAt(i)) {
                    matchingNumbers++;
                }
            }

            if (matchingNumbers == tempNumberString.length()) {
                return true;
            }
            return false;
        }

        protected boolean determineDuckNumber(long playerInput) {

            String tempNumberString = Long.toString(playerInput);

            long lengthOfString = (tempNumberString.length() - 1);

            for (int i = 0; i <= lengthOfString; i++) {
                char tempNumber = tempNumberString.charAt(i);

                if (DUCK_NUMBER == tempNumber) {
                    return true;
                }
            }
            return false;
        }

        protected boolean determineBuzzNumberStatus() {
            boolean endsSeven = endsWithSeven(playerInput);
            boolean dividesSeven = isDivisibleBySeven(playerInput);

            if (endsSeven || dividesSeven) {
                return true;
            } else {
                return false;
            }

        }

        protected boolean determineGapful(long playerInput) {

            String numberString = Long.toString(playerInput);
            if (numberString.length() < 3) {
                return false;
            }

            int lengthOfString = numberString.length();
            char firstNumber = numberString.charAt(0);
            char lastNumber = numberString.charAt(lengthOfString - 1);
            String concatenatedNumberAsString = new StringBuilder().append(firstNumber).append(lastNumber).toString();
            long concatenatedNumber = Long.parseLong(concatenatedNumberAsString);
            long inputNumber = Long.parseLong(numberString);

            if (inputNumber % concatenatedNumber == 0) {
                return true;
            } else {
                return false;
            }
        }

        protected boolean determineSpy(long playerInput) {

            String numberString = Long.toString(playerInput);
            int lengthOfString = numberString.length();
            int tempNumberAdd = 0;
            int tempNumberProduct = 1;              // Starts from 1 as the value is used to initiate multiplication
            int sumOfPlayerInput = 0;
            int productOfPlayerInput = 0;

            for (int i = 0; i < lengthOfString; i++) {
                tempNumberAdd = tempNumberAdd + Integer.parseInt(Character.toString(numberString.charAt(i)));

                sumOfPlayerInput = tempNumberAdd;
            }

            for (int j = 0; j < lengthOfString; j++) {
                tempNumberProduct = tempNumberProduct * Integer.parseInt(Character.toString(numberString.charAt(j)));
                productOfPlayerInput = tempNumberProduct;
            }

            if (productOfPlayerInput == sumOfPlayerInput) {
                return true;
            }


            return false;
        }

        protected boolean determineSunny(long playerInput) {

            double dPlayerInput = playerInput;
            double sunnyNumberCandidate = Math.sqrt(dPlayerInput + 1);

            if (sunnyNumberCandidate % 1 == 0) {
                return true;
            }
            return false;
        }

        protected boolean determineSquare(long playerInput) {
            double dPlayerInput = playerInput;
            double squareNumberCandidate = Math.sqrt(dPlayerInput);

            if (squareNumberCandidate % 1 == 0) {
                return true;
            }
            return false;
        }

        protected boolean determineJumping(long playerInput) {
            String numberAsString = Long.toString(playerInput);
            int lengthOfNumber = numberAsString.length();
            int counter = 0;


            if (lengthOfNumber == 1) {
                return true;
            } else {

                for (int i = 0; i < lengthOfNumber - 1; i++) {
                    int firstNumber = Integer.parseInt(Character.toString(numberAsString.charAt(i)));
                    int secondNumber = Integer.parseInt(Character.toString(numberAsString.charAt(i + 1)));
                    int differenceOfNumbers = secondNumber - firstNumber;

                    if (differenceOfNumbers == 1) {
                        counter++;
                    } else if (differenceOfNumbers == -1) {
                        counter++;
                    }

                }

                if (counter == lengthOfNumber - 1) {
                    return true;
                }
            }
            return false;
        }

        protected boolean isNotEmpty(String findCase) {

            if (findCase == null) {
                return false;
            }

            if (findCase != null || !findCase.isEmpty()) {
                return true;
            }
            return false;
        }

        protected void printResult() {
            boolean isEven = determineEvenOrOdd(playerInput);
            boolean isBuzz = determineBuzzNumberStatus();
            boolean isDuck = determineDuckNumber(playerInput);
            boolean isPalindromic = determinePalindromic(playerInput);
            boolean isGapful = determineGapful(playerInput);
            boolean isSpy = determineSpy(playerInput);
            boolean isSunny = determineSunny(playerInput);
            boolean isSquare = determineSquare(playerInput);
            boolean hasFindCase = isNotEmpty(checkProperty);
            boolean hasSecondFindCase = isNotEmpty(secondCheckProperty);
            boolean isJumping = determineJumping(playerInput);

            int printFindCase = 0;


            if (hasFindCase && !hasSecondFindCase) {
                printFindCase = 1;
            } else if (hasSecondFindCase && hasFindCase) {
                printFindCase = 2;
            }


            if (playerInput < 0) {
                System.out.print("The first parameter should be a natural number or zero.\n");
                return;
            }

            if (playerInput == 0) {
                System.out.print("Goodbye!");
                return;
            }


            if (multiAnalysis() && findCase) {      // checks to see if we need to match a case and how many

                // check to see if the current number matches the case.
                for (int i = 0; i < optionsToChooseFrom.length; i++) {

                    List<AmazingNumber> amazingNumbers = new ArrayList<>(); // creates a new list object
                    amazingNumbers.add(new AmazingNumber("duck", isDuck));
                    amazingNumbers.add(new AmazingNumber("buzz", isBuzz));
                    amazingNumbers.add(new AmazingNumber("palindromic", isPalindromic));
                    amazingNumbers.add(new AmazingNumber("gapful", isGapful));
                    amazingNumbers.add(new AmazingNumber("even", isEven));
                    amazingNumbers.add(new AmazingNumber("odd", !isEven));
                    amazingNumbers.add(new AmazingNumber("spy", isSpy));
                    amazingNumbers.add(new AmazingNumber("sunny", isSunny));
                    amazingNumbers.add(new AmazingNumber("square", isSquare));
                    amazingNumbers.add(new AmazingNumber("jumping", isJumping));


                    StringBuilder amazingAnalysis = new StringBuilder();

                    for (AmazingNumber amazingNumber : amazingNumbers) {
                        if (amazingNumber.isTrueValue()) {
                            if (amazingAnalysis.length() > 0) {
                                amazingAnalysis.append(", ");
                            }
                            amazingAnalysis.append(amazingNumber.getAmazingNumberName());
                        }

                    }

                    String fullString = amazingAnalysis.toString();
                    String[] components = fullString.split(", ");

                    switch (printFindCase) {

                        case 1:

                            for (int j = 0; j < components.length; j++) {
                                if (checkProperty.equalsIgnoreCase(components[j])) {
                                    System.out.print(playerInput + " is ");
                                    System.out.println(amazingAnalysis);
                                    foundCases++;
                                    return;
                                }
                            }
                            break;

                        case 2:

                            int foundFirstMatch = 0, foundSecondMatch = 0;

                            for (int j = 0; j < components.length; j++) {

                                if (checkProperty.equalsIgnoreCase(components[j])) {
                                    foundFirstMatch = 1;

                                } else if (secondCheckProperty.equalsIgnoreCase(components[j])) {
                                    foundSecondMatch = 1;
                                } else {
                                }
                            }

                            if (foundFirstMatch == 1 && foundSecondMatch == 1) {
                                System.out.print(playerInput + " is ");
                                System.out.println(amazingAnalysis);
                                foundCases++;
                                return;
                            }

                            break;

                        default:
                            break;
                    }

                }

            }


            if (multiAnalysis() && !findCase) {
                List<AmazingNumber> amazingNumbers = new ArrayList<>(); // creates a new list object
                amazingNumbers.add(new AmazingNumber("duck", isDuck));
                amazingNumbers.add(new AmazingNumber("buzz", isBuzz));
                amazingNumbers.add(new AmazingNumber("palindromic", isPalindromic));
                amazingNumbers.add(new AmazingNumber("gapful", isGapful));
                amazingNumbers.add(new AmazingNumber("even", isEven));
                amazingNumbers.add(new AmazingNumber("odd", !isEven));
                amazingNumbers.add(new AmazingNumber("spy", isSpy));
                amazingNumbers.add(new AmazingNumber("sunny", isSunny));
                amazingNumbers.add(new AmazingNumber("square", isSquare));
                amazingNumbers.add(new AmazingNumber("jumping", isJumping));

                StringBuilder amazingAnalysis = new StringBuilder();

                for (AmazingNumber amazingNumber : amazingNumbers) {
                    if (amazingNumber.isTrueValue()) {
                        if (amazingAnalysis.length() > 0) {
                            amazingAnalysis.append(", ");
                        }
                        amazingAnalysis.append(amazingNumber.getAmazingNumberName());
                    }

                }

                System.out.print(playerInput + " is ");
                System.out.println(amazingAnalysis);

            } else if (!findCase) {

                System.out.printf("Properties of %d%n", playerInput);
                System.out.printf("even: %b%n", isEven);
                System.out.printf("odd: %b%n", !isEven);
                System.out.printf("buzz: %b%n", isBuzz);
                System.out.printf("duck: %b%n", isDuck);
                System.out.printf("palindromic: %b%n", isPalindromic);
                System.out.printf("gapful: %b%n", isGapful);
                System.out.printf("spy: %b%n", isSpy);
                System.out.printf("sunny: %b%n", isSunny);
                System.out.printf("square: %b%n", isSquare);
                System.out.printf("jumping: %b%n", isJumping);
            } else return;

        }

    }

    public static void main(String[] args) throws IOException {

        Main main = new Main();

        while (main.running) {
            main.getPlayerInput();
            main.updateRunning();
            main.convertIntToString(main.playerInput);

            Operations operations = main.new Operations(main.playerInput, main.numberString,
                    main.running, main.countOfNumbersToAnalyze, main.findCase, main.checkProperty, main.secondCheckProperty);

            if (!operations.multiAnalysis()) {
                operations.printResult();
                main.updateRunning();
                main.countOfNumbersToAnalyze = 0;
            } else if (!main.findCase) {

                while (operations.runs < main.countOfNumbersToAnalyze) {
                    operations.printResult();
                    operations.runs++;
                    operations.playerInput++;
                    main.updateRunning();
                }

            } else {
                while (operations.foundCases < main.countOfNumbersToAnalyze && main.running) {         // keeps loop going all cases found
                    operations.printResult();
                    operations.playerInput++;
                    main.updateRunning();
                }
            }

        }
    }

}
